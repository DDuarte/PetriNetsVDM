class PetriNet
    instance variables
        places : set of Place := {};
        arcs : set of Arc := {};
        transitions : set of Transition := {};
        marking: map Place to nat := {|->};
        starts : Place;
        finish : set of Place := {};
        /*private static placeIdCounter: nat := 0;*/
  	inv starts in set places;
  	inv finish subset places;
  	inv forall arc in set arcs & arc.place in set places and arc.transition in set transitions;

    operations
        public PetriNet(p: set of Place, s: Place, f: set of Place, a: set of Arc, m: map Place to nat, t: set of Transition) res: PetriNet ==
        		(places := p; starts := s; finish := f; arcs := a; marking := m; transitions := t; return self)
    		pre dom m = p and
    		 	s in set p and
    		 	f subset p and
    		 	forall a1 in set a & a1.place in set p and a1.transition in set t;
    		 	
  		 	public Trigger(t: Transition) res: () == (
  		 			dcl inputArcs: set of InputArc;
  		 			dcl outputArcs: set of OutputArc;
  		 			dcl selectedOutputArcs: set of OutputArc;
  		 			dcl inputArcsTokens: nat := 0;
						
						for all arc in set arcs do (
							if arc.transition = t then (
									if isofclass(InputArc, arc) and arc.IsEnabled(marking) then
										inputArcs := inputArcs union {arc}
									else if isofclass(OutputArc, arc) then
										outputArcs := outputArcs union {arc}
							)
  		 			);
  		 			
  		 			if card inputArcs = 0 or card outputArcs = 0 then return;

  		 			for all inputArc in set inputArcs do (
  		 				inputArcsTokens := inputArcsTokens + marking(inputArc.place)
  		 			);
  		 			
  		 			for all outputArc in set outputArcs do (
  		 				if outputArc.weight >= inputArcsTokens then
  		 					selectedOutputArcs := selectedOutputArcs union {outputArc}
  		 			);
  		 			
  		 			for all outputArc in set selectedOutputArcs do (
  		 				marking(outputArc.place) := min(inputArcsTokens, outputArc.weight)
  		 				/* TODO: update inputArc.place markings */
  		 			);
  		 			
  		 			
	 			)
  		 	pre t in set transitions;

end PetriNet
